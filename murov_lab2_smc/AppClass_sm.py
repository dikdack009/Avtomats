# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : AppClass.sm

import statemap


class AppClassState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def Digit19(self, fsm):
        self.Default(fsm)

    def Dot(self, fsm):
        self.Default(fsm)

    def EOS(self, fsm):
        self.Default(fsm)

    def LetterE(self, fsm):
        self.Default(fsm)

    def LetterS(self, fsm):
        self.Default(fsm)

    def Server(self, fsm):
        self.Default(fsm)

    def Slash(self, fsm):
        self.Default(fsm)

    def Stick(self, fsm):
        self.Default(fsm)

    def StringTitle(self, fsm):
        self.Default(fsm)

    def Symbol(self, fsm):
        self.Default(fsm)

    def Unknown(self, fsm):
        self.Default(fsm)

    def Zero(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class Map1_Default(AppClassState):

    def LetterE(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def LetterS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Symbol(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def StringTitle(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Slash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Digit19(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Zero(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Stick(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Dot(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Server(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

class Map1_Start(Map1_Default):

    def LetterE(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addSymbolToTitle()
        finally:
            fsm.setState(Map1.Title)
            fsm.getState().Entry(fsm)

class Map1_Title(Map1_Default):

    def Slash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addSymbolToTitle()
        finally:
            fsm.setState(Map1.FirstSlash)
            fsm.getState().Entry(fsm)

    def Symbol(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addSymbolToTitle()
        finally:
            fsm.setState(Map1.Title)
            fsm.getState().Entry(fsm)

class Map1_FirstSlash(Map1_Default):

    def Slash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addSymbolToTitle()
        finally:
            fsm.setState(Map1.FirstSlash)
            fsm.getState().Entry(fsm)

    def Stick(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isTitleValid() :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(Map1.FirstDiv)
            fsm.getState().Entry(fsm)
        else:
            Map1_Default.Stick(self, fsm)
        
class Map1_FirstDiv(Map1_Default):

    def LetterS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addSymbolToServer()
        finally:
            fsm.setState(Map1.Server)
            fsm.getState().Entry(fsm)

class Map1_Server(Map1_Default):

    def Stick(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isServerValid() :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(Map1.SecondDiv)
            fsm.getState().Entry(fsm)
        else:
            Map1_Default.Stick(self, fsm)
        
    def Symbol(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addSymbolToServer()
        finally:
            fsm.setState(Map1.Server)
            fsm.getState().Entry(fsm)

class Map1_SecondDiv(Map1_Default):

    def Digit19(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToOkt()
        finally:
            fsm.setState(Map1.FirstOkt)
            fsm.getState().Entry(fsm)

    def Zero(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.FirstOktSpecial)
        fsm.getState().Entry(fsm)

class Map1_FirstOktSpecial(Map1_Default):

    def Dot(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.FirstDot)
        fsm.getState().Entry(fsm)

class Map1_FirstOkt(Map1_Default):

    def Digit19(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToOkt()
        finally:
            fsm.setState(Map1.FirstOkt)
            fsm.getState().Entry(fsm)

    def Dot(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isOktValid() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.MakeCurrentOktNull()
            finally:
                fsm.setState(Map1.FirstDot)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.Dot(self, fsm)
        
    def Zero(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToOkt()
        finally:
            fsm.setState(Map1.FirstOkt)
            fsm.getState().Entry(fsm)

class Map1_FirstDot(Map1_Default):

    def Digit19(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToOkt()
        finally:
            fsm.setState(Map1.SecondOkt)
            fsm.getState().Entry(fsm)

    def Zero(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SecondOktSpecial)
        fsm.getState().Entry(fsm)

class Map1_SecondOktSpecial(Map1_Default):

    def Dot(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SecondDot)
        fsm.getState().Entry(fsm)

class Map1_SecondOkt(Map1_Default):

    def Digit19(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToOkt()
        finally:
            fsm.setState(Map1.SecondOkt)
            fsm.getState().Entry(fsm)

    def Dot(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isOktValid() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.MakeCurrentOktNull()
            finally:
                fsm.setState(Map1.SecondDot)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.Dot(self, fsm)
        
    def Zero(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToOkt()
        finally:
            fsm.setState(Map1.SecondOkt)
            fsm.getState().Entry(fsm)

class Map1_SecondDot(Map1_Default):

    def Digit19(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToOkt()
        finally:
            fsm.setState(Map1.ThirdOkt)
            fsm.getState().Entry(fsm)

    def Zero(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.ThirdOktSpecial)
        fsm.getState().Entry(fsm)

class Map1_ThirdOktSpecial(Map1_Default):

    def Dot(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.ThirdDot)
        fsm.getState().Entry(fsm)

class Map1_ThirdOkt(Map1_Default):

    def Digit19(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToOkt()
        finally:
            fsm.setState(Map1.ThirdOkt)
            fsm.getState().Entry(fsm)

    def Dot(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isOktValid() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.MakeCurrentOktNull()
            finally:
                fsm.setState(Map1.ThirdDot)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.Dot(self, fsm)
        
    def Zero(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToOkt()
        finally:
            fsm.setState(Map1.ThirdOkt)
            fsm.getState().Entry(fsm)

class Map1_ThirdDot(Map1_Default):

    def Digit19(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToOkt()
        finally:
            fsm.setState(Map1.FourthOkt)
            fsm.getState().Entry(fsm)

    def Zero(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.FourthOktSpecial)
        fsm.getState().Entry(fsm)

class Map1_FourthOktSpecial(Map1_Default):

    def Stick(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.ThirdDiv)
        fsm.getState().Entry(fsm)

class Map1_FourthOkt(Map1_Default):

    def Digit19(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToOkt()
        finally:
            fsm.setState(Map1.FourthOkt)
            fsm.getState().Entry(fsm)

    def Stick(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isOktValid() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.MakeCurrentOktNull()
            finally:
                fsm.setState(Map1.ThirdDiv)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.Stick(self, fsm)
        
    def Zero(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToOkt()
        finally:
            fsm.setState(Map1.FourthOkt)
            fsm.getState().Entry(fsm)

class Map1_ThirdDiv(Map1_Default):

    def Digit19(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToPort()
        finally:
            fsm.setState(Map1.Port)
            fsm.getState().Entry(fsm)

class Map1_Port(Map1_Default):

    def Digit19(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToPort()
        finally:
            fsm.setState(Map1.Port)
            fsm.getState().Entry(fsm)

    def Stick(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isPortValid() :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(Map1.FourthDiv)
            fsm.getState().Entry(fsm)
        else:
            Map1_Default.Stick(self, fsm)
        
    def Zero(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addDigitToPort()
        finally:
            fsm.setState(Map1.Port)
            fsm.getState().Entry(fsm)

class Map1_FourthDiv(Map1_Default):

    def Slash(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Cool)
        fsm.getState().Entry(fsm)

class Map1_Cool(Map1_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(Map1.OK)
            fsm.getState().Entry(fsm)

class Map1_OK(Map1_Default):
    pass

class Map1_Error(Map1_Default):
    pass

class Map1(object):

    Start = Map1_Start('Map1.Start', 0)
    Title = Map1_Title('Map1.Title', 1)
    FirstSlash = Map1_FirstSlash('Map1.FirstSlash', 2)
    FirstDiv = Map1_FirstDiv('Map1.FirstDiv', 3)
    Server = Map1_Server('Map1.Server', 4)
    SecondDiv = Map1_SecondDiv('Map1.SecondDiv', 5)
    FirstOktSpecial = Map1_FirstOktSpecial('Map1.FirstOktSpecial', 6)
    FirstOkt = Map1_FirstOkt('Map1.FirstOkt', 7)
    FirstDot = Map1_FirstDot('Map1.FirstDot', 8)
    SecondOktSpecial = Map1_SecondOktSpecial('Map1.SecondOktSpecial', 9)
    SecondOkt = Map1_SecondOkt('Map1.SecondOkt', 10)
    SecondDot = Map1_SecondDot('Map1.SecondDot', 11)
    ThirdOktSpecial = Map1_ThirdOktSpecial('Map1.ThirdOktSpecial', 12)
    ThirdOkt = Map1_ThirdOkt('Map1.ThirdOkt', 13)
    ThirdDot = Map1_ThirdDot('Map1.ThirdDot', 14)
    FourthOktSpecial = Map1_FourthOktSpecial('Map1.FourthOktSpecial', 15)
    FourthOkt = Map1_FourthOkt('Map1.FourthOkt', 16)
    ThirdDiv = Map1_ThirdDiv('Map1.ThirdDiv', 17)
    Port = Map1_Port('Map1.Port', 18)
    FourthDiv = Map1_FourthDiv('Map1.FourthDiv', 19)
    Cool = Map1_Cool('Map1.Cool', 20)
    OK = Map1_OK('Map1.OK', 21)
    Error = Map1_Error('Map1.Error', 22)
    Default = Map1_Default('Map1.Default', -1)

class AppClass_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, Map1.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
